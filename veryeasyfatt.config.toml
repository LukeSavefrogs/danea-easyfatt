# --------------------------------------------------------------
#                 Default configuration file
# --------------------------------------------------------------
log_level = "INFO"                       	# Per la lista completa dei livelli di logging: https://docs.python.org/3/library/logging.html#logging-levels


[easyfatt.database]
filename = ""


[easyfatt.customers]
custom_field = 1                          	# Numero del campo "Extra {N}"
export_filename = [                       	# Nome del file esportato dalla sezione clienti di EasyFatt
	"Soggetti.xlsx", 
	"Soggetti.ods"
]


[files.input]
easyfatt = "./Documenti.DefXml"           	# Percorso (relativo o assoluto) al file `*.DefXML` generato dal gestionale "Danea Easyfatt".
addition = ""                             	# Percorso (relativo o assoluto) al file `*.xml` con le righe da aggiungere come primo figlio del tag `Documents`.


[files.output]
csv = "./Documenti.csv"                   	# Percorso (relativo o assoluto) al file CSV di output.
kml = ""                                  	# Percorso (relativo o assoluto) al file KML di output.


[options.output]
# Stringa utilizzata come template per OGNI riga del CSV.
# NON MODIFICARE I NOMI DEI PLACEHOLDER che iniziano per `eval_*`!
csv_template = "@{CustomerName} {CustomerCode}@{eval_IndirizzoSpedizione} {eval_CAPSpedizione} {eval_CittaSpedizione}(20){eval_intervalloSpedizione}^{eval_pesoSpedizione}^"


[features.shipping]
default_interval = "07:00-16:00"          	# Intervallo orario di spedizione di default


[features.kml_generation]
google_api_key = ""                       	# Chiave API di Google Maps per la generazione del KML
placemark_title = "{customerName} ({customerCode}) {notes}" # Formato del nome del segnaposto nel KML
location_search_type = "strict"		   		# Tipo di ricerca da effettuare per la localizzazione del cliente:
											#   - "strict": mostra errore se non viene trovato esattamente un indirizzo
											#   - "postcode": usa il CAP per fare un controllo aggiuntivo